@page "/PersonalInfo"
@inject IJSRuntime _js;

<div class="form-row">
    <div class="form-group col-md-1">
        <label for="inputEmail4">First name</label>
        <input type="text" @bind="@_firstName" class="form-control" id="inputEmail4" placeholder="Tarou">
    </div>
    <div class="form-group col-md-1">
        <label for="inputPassword4">Last name</label>
        <input type="text" @bind="@_lastName" class="form-control" id="inputPassword4" placeholder="Dann">
    </div>
</div>

<div class="form-group col-md-2">
    <label for="inputPassword4">Country</label>
    <input type="text" @bind="@_lastName" class="form-control" id="inputPassword4" placeholder="Japan">
</div>

<div>
    <div class="form-group col-md-3">
        <label for="inputPassword4">Post Code</label>
        <input type="text" @bind="@_lastName" class="form-control" id="inputPassword4" placeholder="123-4567">
    </div>
    <div class="form-group col-md-4">
        <label for="inputPassword4">Address</label>
        <input type="text" @bind="@_lastName" class="form-control" id="inputPassword4" placeholder="東京都新宿区1-1-1">
    </div>
</div>

<p>Your Longitude: @_longitude</p>
<p>Your Latitude: @_latitude</p>

@* <button @onclick="SetAddress">Confirm your address</button> *@

<hr>

<p>Your pay: @_currentCount JPYC</p>

<div>
    <button class="btn btn-primary" @onclick="IncrementCount"> + </button>
    <button class="btn btn-primary" @onclick="DecrementCount"> - </button>
    <button class="btn btn-primary" @onclick="ClearCount"> Clear </button>
</div>

<hr>






@code {
    // https://qiita.com/nobu17/items/7465006ce24a4490183b

    string _firstName = "", _lastName = "";

    int _longitude, _latitude;


    async void SetAddress()
    {
        @* var module = await _js.InvokeAsync<IJSObjectReference>("import", "./js/extentions.js"); *@
    }
}

@code
{
    int _currentCount = 0;

    int _maxVal = 100 * 10, _minVal = 0, _step = 100;

    [Inject]
    LocalStorage _localStorage { get; set; }

    async void IncrementCount(){
        if(_currentCount < _maxVal) _currentCount += _step;

        await _localStorage.SetItem(KeyList.Jpyc, _currentCount.ToString());
    }

    async void DecrementCount(){
        if(_currentCount > _minVal) _currentCount -= _step;

        await _localStorage.SetItem(KeyList.Jpyc, _currentCount.ToString());
    }

    async void ClearCount(){
        _currentCount = 0;
        await _localStorage.RemoveItem(KeyList.Jpyc);
    }

    protected override async Task OnInitializedAsync()
    {
        var countText = await _localStorage.GetItem(KeyList.Jpyc);
        if(int.TryParse(countText, out var count)){
            _currentCount = count;
        }
    }
}
